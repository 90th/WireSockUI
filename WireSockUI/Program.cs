using Microsoft.Win32;
using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Threading;
using System.Windows.Forms;
using WireSockUI.Extensions;
using WireSockUI.Forms;
using WireSockUI.Properties;

namespace WireSockUI
{
    internal static class Global
    {
        public static string mainFolder = $"{Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)}\\WireSockUI";
        public static string configsFolder = mainFolder + "\\Configs";
        public static Mutex alreadyRunning;
    }

    internal static class Program
    {
        [STAThread]
        private static void Main()
        {
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);

            if (!Directory.Exists(Global.mainFolder)) Directory.CreateDirectory(Global.mainFolder);
            if (!Directory.Exists(Global.configsFolder)) Directory.CreateDirectory(Global.configsFolder);

            if (IsApplicationAlreadyRunning())
            {
                MessageBox.Show(Resources.AlreadyRunningMessage, Resources.AlreadyRunningTitle, MessageBoxButtons.OK, MessageBoxIcon.Information);
                Environment.Exit(1);
            }

            if (!IsWireSockInstalled())
            {
                MessageBox.Show(Resources.AppNoWireSockMessage, Resources.AppNoWireSockTitle, MessageBoxButtons.OK, MessageBoxIcon.Information);
                OpenBrowser(Resources.AppWireSockURL);

                Environment.Exit(1);
            }

            CheckVersion();

            Application.Run(new frmMain());
        }

        private static void OpenBrowser(string url)
        {
            try
            {
                Process.Start(url);
            }
            catch
            {
            }
        }

        /// <summary>
        /// Determine if this WireSockUI was generated by an automated build from a GitHub repository
        /// </summary>
        /// <returns>Assembly repository if set during build</returns>
        private static string GetRepository()
        {
            Assembly assembly = Assembly.GetExecutingAssembly();

            foreach (AssemblyMetadataAttribute metadata in assembly.GetCustomAttributes<AssemblyMetadataAttribute>())
            {
                if (String.Equals(metadata.Key, "Repository"))
                    return metadata.Value;
            }

            return null;
        }

        /// <summary>
        /// Compare the local product version against the latest GitHub repository release tag
        /// </summary>
        /// <remarks>If auto update is enabled, repository is known and there is a new version, open up a browser window.</remarks>
        private static void CheckVersion()
        {
            if (!Settings.Default.AutoUpdate) return;

            try
            {
                string repository = GetRepository();

                if (!String.IsNullOrWhiteSpace(repository))
                {

                    Version currentVersion = new Version(Application.ProductVersion);
                    Version latestVersion = GitHubExtensions.GetLatestRelease(repository);

                    if (currentVersion != null && latestVersion != null && latestVersion > currentVersion)
                    {
                        MessageBox.Show(Resources.AppUpdateMessage, Resources.AppUpdateTitle, MessageBoxButtons.OK, MessageBoxIcon.Information);
                        OpenBrowser($"https://github.com/{repository}/releases");
                    }
                }

            }
            catch { }
        }

        /// <summary>
        /// Determine if the WireSock library components are installed.
        /// </summary>
        /// <returns><c>true</c> if installed, otherwise <c>false</c></returns>
        private static bool IsWireSockInstalled()
        {
            using (RegistryKey key = Registry.LocalMachine.OpenSubKey("SOFTWARE\\NTKernelResources\\WinpkFilterForVPNClient"))
            {
                if (key == null) return false;
                string wiresockLocation = key.GetValue("InstallLocation") + "bin\\wiresock-client.exe";

                // Add the directory containing the wgbooster.dll to the system's path if it is not added
                string installPath = key.GetValue("InstallLocation").ToString();
                string binPath = Path.Combine(installPath, "bin");

                string environmentPath = Environment.GetEnvironmentVariable("PATH");

                if (environmentPath == null || environmentPath.Contains(binPath))
                    return File.Exists(wiresockLocation);

                environmentPath = $"{binPath};{environmentPath}";
                Environment.SetEnvironmentVariable("PATH", environmentPath);

                return File.Exists(wiresockLocation);
            }
        }

        /// <summary>
        /// Determines if another instance of the current application is already running.
        /// </summary>
        /// <returns>
        /// A boolean value that is true if another instance of the application is already running,
        /// and false if the current instance is the only one running.
        /// </returns>
        /// <remarks>
        /// This function uses a named Mutex (a synchronization primitive) to check if it has been
        /// created before. If the Mutex is not new, that means another instance of the application
        /// is already running.
        /// </remarks>
        static bool IsApplicationAlreadyRunning()
        {
            const string mutexName = "Global\\WiresockClientService";
            Global.alreadyRunning = new Mutex(true, mutexName, out var createdNew);

            if (!createdNew)
            {
                Global.alreadyRunning.Dispose();
                return true;
            }

            return false;
        }

    }
}
